---
interface Props {
    text: string;
    maxCharacters?: number;
    className?: string;
}

const { text, maxCharacters = 150, className = "" } = Astro.props;

// Generate a unique ID for this component instance
const generateUUID = () => Math.random().toString(36).substring(2, 9);
const componentId = `expandable-text-${generateUUID()}`;
---

<div id={componentId} class={`expandable-text ${className}`}>
    <p class="text"></p>
</div>

<script define:vars={{ componentId, maxCharacters, text }}>
    (() => {
        const component = document.getElementById(componentId);
        const textEl = component.querySelector(".text");
        let isExpanded = false;

        if (text.length > maxCharacters) {
            const updateText = () => {
                if (isExpanded) {
                    textEl.innerHTML = `${text} <span class="toggle-btn text-yellow-500 hover:underline ml-1 text-sm">mniej</span>`;
                } else {
                    textEl.innerHTML = `${text.slice(0, maxCharacters)}... <span class="toggle-btn text-yellow-500 hover:underline ml-1 text-sm">wiÄ™cej</span>`;
                }
            };

            updateText();

            textEl.addEventListener("click", (e) => {
                if (e.target.classList.contains("toggle-btn")) {
                    isExpanded = !isExpanded;
                    updateText();
                }
            });
        } else {
            textEl.textContent = text;
        }
    })();
</script>

<style>
    .text {
        overflow: hidden;
    }
</style>
