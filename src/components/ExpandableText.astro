---
interface Props {
    text: string;
    maxCharacters?: number;
    className?: string;
}

const { text, maxCharacters = 150, className = "" } = Astro.props;
const id = `expandable-${Math.random().toString(36).slice(2)}`;
---

<div class={`expandable-text ${className}`} id={id}>
    <p class="text"></p>
</div>

<script define:vars={{ text, maxCharacters, id }}>
    (() => {
        const container = document.getElementById(id);
        const textEl = container.querySelector(".text");
        let isExpanded = false;

        const updateText = () => {
            if (text.length <= maxCharacters) {
                textEl.textContent = text;
                return;
            }

            textEl.innerHTML = isExpanded
                ? `${text} <span class="toggle-btn text-yellow-500 hover:underline ml-1 text-sm cursor-pointer">mniej</span>`
                : `${text.slice(0, maxCharacters)}... <span class="toggle-btn text-yellow-500 hover:underline ml-1 text-sm cursor-pointer">wiÄ™cej</span>`;
        };

        updateText();

        textEl.addEventListener("click", (e) => {
            if (e.target.classList.contains("toggle-btn")) {
                isExpanded = !isExpanded;
                updateText();
            }
        });
    })();
</script>

<style>
    .text {
        overflow: hidden;
    }
</style>
