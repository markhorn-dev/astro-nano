---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/600.css";
import inter400 from "@fontsource/inter/files/inter-latin-400-normal.woff2";
import inter600 from "@fontsource/inter/files/inter-latin-600-normal.woff2";
import lora400 from "@fontsource/lora/files/lora-latin-400-normal.woff2";
import lora600 from "@fontsource/lora/files/lora-latin-600-normal.woff2";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;

const googleTagId = import.meta.env.GOOGLE_TAG_ID;

declare global {
  interface Window {
    dataLayer: any[];
  }
}
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon-dark.svg"
  media="(prefers-color-scheme: dark)"
/>
<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon-light.svg"
  media="(prefers-color-scheme: light)"
/>
<link rel="icon" type="image/x-icon" href="/favicon-light.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={inter400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={inter600} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora600} as="font" type="font/woff2" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Conditionally include Google Tag code if GOOGLE_TAG_ID is set -->
{googleTagId && (
  <>
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${googleTagId}`}></script>
    <script define:vars={{ googleTagId }}>
      window.dataLayer = window.dataLayer || [];
      function gtag() {{ window.dataLayer.push(arguments); }}
      // @ts-ignore
      gtag('js', new Date());
      // @ts-ignore
      gtag('config', googleTagId);
    </script>
  </>
)}



<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script>
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e.newDocument.head.querySelectorAll('link[as="font"]')),
    ].forEach((link) => link.remove()),
  );
</script>

<script is:inline>
  const THEME_CHANGE_EVENT = "theme-change";

  function init() {
    preloadTheme();
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "light");
      toggleTheme(false);
      dispatchThemeChange("light");
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "dark");
      toggleTheme(true);
      dispatchThemeChange("dark");
    });

    const systemThemeButton = document.getElementById("system-theme-button");
    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "system");
      const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      toggleTheme(isDark);
      dispatchThemeChange("system");
    });

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
          dispatchThemeChange("system");
        }
      });

    // Add theme change listener
    document.addEventListener(THEME_CHANGE_EVENT, (e) => {
      updateThemeUI(e.detail.theme);
    });

    document.addEventListener("scroll", onScroll);

    // Initial UI update
    updateThemeUI(localStorage.theme || "system");
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function dispatchThemeChange(theme) {
    document.dispatchEvent(
      new CustomEvent(THEME_CHANGE_EVENT, {
        detail: { theme },
      }),
    );
  }

  function updateThemeUI(theme) {
    // Remove active class from all theme buttons
    document
      .querySelectorAll('[id$="-theme-button"]')
      .forEach((btn) => btn.classList.remove("active"));

    // Add active class to current theme button
    const activeButton = document.getElementById(`${theme}-theme-button`);
    if (activeButton) {
      activeButton.classList.add("active");
    }
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      ),
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>