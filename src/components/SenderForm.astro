---
import Link from "@components/Link.astro";

const senderApiKey = import.meta.env.PUBLIC_SENDER_API_KEY;
const groupId = import.meta.env.PUBLIC_SENDER_GROUP_ID;
---

<div
    class="animate w-96 mx-auto mt-8 p-6 rounded-lg border border-slate-200 dark:border-slate-800 shadow-sm"
>
    <div class="text-center mb-6">
        <h3 class="text-2xl font-bold text-black dark:text-white mb-2">
            Bądź na bieżąco!
        </h3>
        <p class="text-slate-600 dark:text-slate-400">
            Zapisz się, aby otrzymywać najnowsze artykuły prosto na swoją
            skrzynkę.
        </p>
    </div>

    <form id="senderForm" class="space-y-4">
        <div class="space-y-2">
            <input
                type="text"
                id="name"
                name="name"
                required
                minlength="2"
                placeholder="Twoje imię"
                class="w-full px-4 py-2 border border-slate-200 dark:border-slate-800 rounded-md focus:ring-2 focus:ring-primary focus:border-primary bg-white dark:bg-slate-900 text-black dark:text-white placeholder-slate-500 dark:placeholder-slate-400"
                aria-label="Twoje imię"
            />
        </div>
        <div class="space-y-2">
            <input
                type="email"
                id="email"
                name="email"
                required
                placeholder="twoj@email.pl"
                class="w-full px-4 py-2 border border-slate-200 dark:border-slate-800 rounded-md focus:ring-2 focus:ring-primary focus:border-primary bg-white dark:bg-slate-900 text-black dark:text-white placeholder-slate-500 dark:placeholder-slate-400"
                aria-label="Twój adres email"
            />
        </div>
        <div class="space-y-4 flex flex-col items-center">
            <button
                type="submit"
                class="button bg-primary hover:bg-primary/80 py-2 px-4 rounded-md transition-colors duration-200 flex items-center justify-center space-x-2 border border-slate-200 dark:border-slate-800"
            >
                <span>Zapisz się</span>
                <span
                    class="loading-spinner hidden h-4 w-4 border-2 border-white border-t-transparent rounded-full"
                ></span>
            </button>
            <p class="text-sm text-slate-600 dark:text-slate-400 text-center">
                Zapisując się akceptujesz
                <Link href="/privacy-policy">Politykę Prywatności</Link>
            </p>
        </div>
        <div class="message text-center font-medium" aria-live="polite"></div>
    </form>
</div>

<style>
    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .loading-spinner {
        animation: spin 1s linear infinite;
    }
</style>

<script define:vars={{ groupId, senderApiKey }}>
    document.addEventListener("DOMContentLoaded", () => {
        let isSubscribing = false;
        const form = document.getElementById("senderForm");
        const spinner = form?.querySelector(".loading-spinner");
        const messageDiv = form?.querySelector(".message");

        if (!form || !spinner || !messageDiv) {
            console.error("Required elements not found");
            return;
        }

        const validateEmail = (email) => {
            return email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        };

        const showMessage = (message, isError = false) => {
            messageDiv.textContent = message;
            messageDiv.className = `message text-center font-medium ${
                isError
                    ? "text-red-500 dark:text-red-400"
                    : "text-primary dark:text-primary"
            }`;
        };

        const toggleLoading = (loading) => {
            const button = form.querySelector('button[type="submit"]');
            if (!button) return;

            spinner.classList.toggle("hidden", !loading);
            button.disabled = loading;
            isSubscribing = loading;
        };

        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            if (!e.isTrusted) return;

            if (isSubscribing) return;

            const formData = new FormData(form);
            const name = formData.get("name");
            const email = formData.get("email");

            if (!validateEmail(email)) {
                showMessage("Proszę podać prawidłowy adres email", true);
                return;
            }

            if (name.length < 2) {
                showMessage("Imię musi mieć co najmniej 2 znaki", true);
                return;
            }

            toggleLoading(true);

            try {
                const response = await fetch(
                    "https://api.sender.net/v2/subscribers",
                    {
                        method: "POST",
                        headers: {
                            Authorization: `Bearer ${senderApiKey}`,
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            email,
                            firstname: name,
                            groups: [groupId],
                        }),
                    },
                );

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || "Błąd subskrypcji");
                }

                showMessage("Dzięki za zapisanie się do newslettera!");
                form.reset();
            } catch (error) {
                showMessage(
                    error.message === "Extension context invalidated"
                        ? "Przepraszamy, wystąpił błąd. Odśwież stronę i spróbuj ponownie."
                        : "Coś poszło nie tak. Spróbuj ponownie.",
                    true,
                );
            } finally {
                toggleLoading(false);
            }
        });
    });
</script>
